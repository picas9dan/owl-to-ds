import csv
import json
import os
from typing import List, Optional

from openai import OpenAI
from tqdm import tqdm
import pandas as pd

PARAPHRASE_NUM = 3
HEADER = ["id", "verbalization", "paraphrases"]


class OpenAiClientForBulletPointResponse:
    SYSTEM_PROMPT_TEMPLATE = "You will be provided with a machine-generated statement. Rephrase it in {num} different ways as if it were human input to a search engine. Additionally, keep the square brackets, tags, and their enclosing text unchanged."

    def __init__(
        self,
        endpoint: None,
        api_key: Optional[str] = None,
        model: str = "gpt-4-0613",
        **kwargs: dict
    ):
        self.openai_client = OpenAI(base_url=endpoint, api_key=api_key)
        self.model = model
        self.kwargs = kwargs

    def _sanitize_bulletpoint(self, text: str):
        text = text.strip()

        if len(text) == 0:
            return text

        if text.startswith("-"):
            text = text[1:]
        elif text[0].isdigit():
            idx = 0
            while idx < len(text) and text[idx].isdigit():
                idx += 1
            text = text[idx:]
            text = text.strip()
            if text[0] in [".", ")"]:
                text = text[1:]

        text = text.strip()

        if text.startswith('"'):
            text = text[1:]
        if text.endswith('"'):
            text = text[:-1]

        return text

    def _is_bulleted_line(self, line: str):
        line = line.strip()
        return line.startswith("-") or (len(line) > 0 and line[0].isdigit())

    def _remove_opening_and_closing_statements(self, lines: List[str]):
        """Detects and removes opening and closing statements generated by OpenAI, if any.

        Example of an opening statement: "Certainly, here are 10 paraphrased versions of the statement:"

        Example of a closing statement: "Note: In the original statement, "enlist" is used, but it is
        unclear whether it refers to including them in a list or recruiting them for a specific purpose.
        Therefore, the paraphrases provided focus on the understanding that a list of molecules exhibiting
        specific characteristics is being requested."
        """
        if (
            len(lines) > 1
            and not self._is_bulleted_line(lines[0])
            and self._is_bulleted_line(lines[1])
        ):
            lines = lines[1:]

        if (
            len(lines) > 1
            and not self._is_bulleted_line(lines[-1])
            and self._is_bulleted_line(lines[-2])
        ):
            lines = lines[:-1]

        return lines

    def _parse_openai_response_content(self, content: str):
        lines = [x.strip() for x in content.split("\n")]
        lines = [x for x in lines if x]
        lines = self._remove_opening_and_closing_statements(lines)
        lines = [self._sanitize_bulletpoint(x) for x in lines]
        return lines

    def call(self, input_text: str):
        response = self.openai_client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "user",
                    "content": self.SYSTEM_PROMPT_TEMPLATE.format(num=PARAPHRASE_NUM) + "\n\n\n" + input_text,
                },
            ],
            **self.kwargs
        )

        response_content = response.choices[0].message.content
        return self._parse_openai_response_content(response_content)


class Paraphraser:
    def __init__(
        self,
        endpoint: None,
        api_key: Optional[str] = None,
        model: str = "gpt-4-0613",
        openai_kwargs: Optional[dict] = None,
    ):
        if openai_kwargs is None:
            self.openai_client = OpenAiClientForBulletPointResponse(
                endpoint, api_key, model
            )
        else:
            self.openai_client = OpenAiClientForBulletPointResponse(
                endpoint, api_key, model, **openai_kwargs
            )

    def paraphrase_from_file(self, filepath: str):
        with open(filepath, "r") as f:
            data = json.load(f)

        filepath_out = filepath.rsplit(".", maxsplit=1)[0] + "_paraphrases.csv"
        print("Writing to file: ", filepath_out)
        if not os.path.exists(filepath_out):
            f = open(filepath_out, "w")
            writer = csv.writer(f)
            writer.writerow(HEADER)
        else:
            df = pd.read_csv(filepath_out)
            data = [datum for datum in data if datum["id"] not in df["id"]]

            f = open(filepath_out, "a")
            writer = csv.writer(f)

        try:
            for datum in tqdm(data):
                paraphrases = self.paraphrase(datum["verbalization"])
                writer.writerow([datum["id"], datum["verbalization"], paraphrases])
        except Exception as e:
            f.close()
            raise e

    def paraphrase(self, text: str):
        return self.openai_client.call(text)
